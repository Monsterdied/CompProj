LocalLimits {

    .method public func(a.i32, b.i32).i32 {

        a2.array.i32 :=.array.i32 new(array, 5.i32).array.i32;

        a1.array.i32 :=.array.i32 new(array, 5.i32).array.i32;

        a2[1.i32].i32 :=.i32 3.i32;

        a2[2.i32].i32 :=.i32 1.i32;

        a1[1.i32].i32 :=.i32 2.i32;

        a1[2.i32].i32 :=.i32 3.i32;

        t3.i32 :=.i32 a1[1.i32].i32;
        t4.i32 :=.i32 a1[2.i32].i32;
        t5.i32 :=.i32 invokevirtual(this.LocalLimits, "func", t3.i32, t4.i32).i32;
        t6.i32 :=.i32 3.i32 +.i32 t5.i32;
        t7.i32 :=.i32 10.i32 *.i32 t6.i32;
        $1.a.i32 :=.i32 $2.b.i32 +.i32 t7.i32;

        t9.i32 :=.i32 a1[1.i32].i32;
        t10.i32 :=.i32 a1[2.i32].i32;
        t11.i32 :=.i32 invokevirtual(this.LocalLimits, "func", t9.i32, t10.i32).i32;
        t12.i32 :=.i32 3.i32 +.i32 t11.i32;
        t13.i32 :=.i32 10.i32 *.i32 t12.i32;
        $1.a.i32 :=.i32 $2.b.i32 +.i32 t13.i32;

        t15.i32 :=.i32 a1[1.i32].i32;
        t16.i32 :=.i32 a1[2.i32].i32;
        t17.i32 :=.i32 invokevirtual(this.LocalLimits, "func", t15.i32, t16.i32).i32;
        t18.i32 :=.i32 3.i32 +.i32 t17.i32;
        t19.i32 :=.i32 10.i32 *.i32 t18.i32;
        $1.a.i32 :=.i32 $2.b.i32 +.i32 t19.i32;

        j.i32 :=.i32 invokevirtual(this.LocalLimits, "func", 3.i32, 4.i32).i32;

        ret.i32 1.i32;

    }

    .construct LocalLimits().V {
        invokespecial(this, "<init>").V;
    }
}